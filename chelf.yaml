openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/panther_meh/Chelf/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/crescent-igor/Chelf/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Admin
    description: Secured admin-only calls
  - name: Chef
    description: operations for chef
  - name: User
    description: operations for user
  - name: Guest
    description: Opeartions for guest 
  - name: Support
    description: Opeartions for customer support 

paths:
  /user:
    get:
      tags:
        - Admin
      summary: searches Users
      operationId: searchUser
      description: search all users and view them by Admin. ID may be given if specific user required
      parameters:
        - name: id
          in: query
          required: false       
          description: id of user
          schema:
            $ref: "#/components/schemas/User/properties/id"
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: bad input parameter
        
  /support:
    get:
      tags:
        - Admin
      summary: searches support staff
      operationId: searchSupport
      description: search support staff and view them by Admin
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Support"
        "400":
          description: bad input parameter
    post:
      tags:
        - Admin
      summary: add Support Staff
      operationId: addSupport
      description: Adds a support staff to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Support"
        description: Support staff to add
      responses:
        "201":
          description: Support Staff created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing staff already exists
  
  /support/{supportId}:
    delete:
      tags:
        - Admin
      summary: Deletes support staff profile  by Admin 
      operationId: deleteSupport
      parameters:
        - name: supportId
          in: path
          description: SupportId id to delete
          required: true
          schema:
            $ref: "#/components/schemas/Support/properties/id"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found

  
  
  /chef/findFilter:
    get:
      tags:
        - User
        - Guest
      summary: Finds chefs by class, cuisine and rating and returrns an array
      description: Choose category of Chef
      operationId: findChefByClass
      parameters:
        - name: status
          in: query
          description: Class values that need to be considered for filter
          required: false
          schema:
            $ref: "#/components/schemas/Chef/properties/class"
        - name: cuisine
          in: query
          description: Cuisines to filter from
          required: false
          schema:
            $ref: "#/components/schemas/Dish/properties/cuisine"
        - name: rating
          in: query
          description: Rating that need to be considered for filter
          required: false
          schema:
            $ref: "#/components/schemas/Chef/properties/avgRating"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChefView"
        400:
          description: Invalid status value

  /dish/findFilter:
    get:
      tags:
        - User
        - Guest
      summary: Finds Dish by cuisine and rating, returns an array of dishes
      description: Choose category for dishes
      operationId: findDishByClass
      parameters:
        - name: cuisine
          in: query
          description: Cuisines to filter from
          required: false
          schema:
            $ref: "#/components/schemas/DishView/properties/cuisine"
        - name: rating
          in: query
          description: Rating that need to be considered for filter
          required: false
          schema:
            $ref: "#/components/schemas/DishView/properties/avgRating"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishView"
        400:
          description: Invalid status value

  /ingredient:
    post:
      tags:
        - Admin
      summary: add ingredient
      operationId: addIng
      description: Adds a ingredient to the system. Each ingredient has a list associated with it. This list consists of its price based on PIN codes across the world
      responses:
        "201":
          description: ingredient created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: an existing ingredient already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
        description: Ingredient to add

  /ingredient/{ingredientId}:
    get:
      tags:
        - Admin
      summary: Get ingredient
      operationId: getIng
      description: Read ingredient data
      parameters:
        - name: ingredientId
          in: path
          description: ID of ingredient that needs to be read
          required: true
          schema:
            $ref: "#/components/schemas/Ingredient/properties/id"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
    put:
      tags:
        - Admin
      summary: update ingredient
      operationId: updateIng
      description: edit an ingredient prices and costs
      parameters:
        - name: ingredientId
          in: path
          description: ID of chef that needs to be updated
          required: true
          schema:
            $ref: "#/components/schemas/Ingredient/properties/id"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
        description: Ingredient Updates

  /ingredient/{ingredientName}:
    get:
      tags:
        - Admin
        - Chef
      summary: Get ingredient by name
      operationId: getIngByName
      description: Read ingredient data
      parameters:
        - name: ingredientName
          in: path
          description: ID of ingredient that needs to be read
          required: true
          schema:
            $ref: "#/components/schemas/Ingredient/properties/name"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientView"
  /chef:
    get:
      tags:
        - Admin
      summary: searches chefs
      operationId: searchChef
      description: search chef and view them by Admin
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chef"
        "400":
          description: bad input parameter
    post:
      tags:
        - Admin
      summary: add Chef
      operationId: addChef
      description: Adds a Chef to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Chef"
        description: Chef to add
      responses:
        "201":
          description: chef created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists

  
  
  /chef/{chefId}:
    get:
      tags:
        - Chef
        - User
      summary: View chefs by id
      description: returns the data of a single chef
      operationId: getchefById
      parameters:
        - name: chefId
          in: path
          description: ID of chef to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation for chef
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chef"
            application/xml:
              schema:
                $ref: "#/components/schemas/Chef"
        "201":
          description: successful operation for user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChefView"
            application/xml:
              schema:
                $ref: "#/components/schemas/ChefView"
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found
    put:
      tags:
        - Chef
      summary: Updates a chef's own profile
      operationId: updatechefWithForm
      parameters:
        - name: chefId
          in: path
          description: ID of chef that needs to be updated
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
      responses:
        "405":
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ChefView"
                
              
                  
    delete:
      tags:
        - Chef
        - Admin
      summary: Deletes one's own profile or by Admin 
      operationId: deleteChef
      parameters:
        - name: chefId
          in: path
          description: Chef id to delete
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found
  
  
  
  /chef/{chefId}/Balance:
    get:
      tags:
        - Chef
      summary: get Account Balance
      description: Get the account balance of a chef
      operationId: getBalByChefId
      parameters:
        - name: chefId
          in: path
          description: ID of chef to return balance
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chef/properties/accountBalance"
            application/xml:
              schema:
                $ref: "#/components/schemas/Chef/properties/accountBalance"
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found
  
  /dish:
    post:
      tags:
        - Chef
      summary: add a Dish to profile
      operationId: addDish
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dish"
        description: Dish to add

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
            application/xml:
              schema:
                $ref: "#/components/schemas/Dish"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
 
  /dish/{dishId}:
    get:
      tags:
        - Chef
        - User
      summary: get dish by dishId
      description: Returns a dish
      operationId: getDishById
      parameters:
        - name: dishId
          in: path
          description: ID of dish to return
          required: true
          schema:
            $ref: "#/components/schemas/DishView/properties/id"
      responses:
        200:
          description: dish View is returned for user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishView"
            application/xml:
              schema:
                $ref: "#/components/schemas/DishView"
        201:
          description: dish is returned for chef if its his own dish
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
            application/xml:
              schema:
                $ref: "#/components/schemas/Dish"
        400:
          description: Invalid ID supplied
        404:
          description: Dish not found
    put:
      tags:
        - Chef
      summary: update dish by dishId
      description: Update Dish properties
      operationId: editDishById
      parameters:
        - name: dishId
          in: path
          description: ID of dish to return
          required: true
          schema:
            $ref: "#/components/schemas/Dish/properties/id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dish"
      responses:
        200:
          description: dish is returned for chef if its his own dish
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
            application/xml:
              schema:
                $ref: "#/components/schemas/Dish"
        400:
          description: Invalid ID supplied
        404:
          description: Dish not found
    delete:
      tags:
        - Chef
      summary: Deletes a Dish
      operationId: deleteDish
      parameters:
        - name: dishId
          in: path
          description: User id to delete
          required: true
          schema:
            $ref: "#/components/schemas/DishView/properties/id"
      responses:
        "200":
          description: Deleted Successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Dish not found

  
  /chef/{chefName}:
    get:
      tags:
        - User
        - Guest
      summary: get Chef by ChefName
      description: Returns a dish
      operationId: getChefByName
      parameters:
        - name: chefName
          in: path
          description: name of chef/chefs to return
          required: true
          schema:
            $ref: "#/components/schemas/ChefView/properties/name"
      responses:
        200:
          description: Chef(s) are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChefView"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChefView"
        400:
          description: Invalid name supplied
        404:
          description: Chef not found
  
  /dish/{dishName}:
    get:
      tags:
        - User
        - Guest
      summary: get dish by dishName
      description: Returns a dish
      operationId: getDishByName
      parameters:
        - name: dishName
          in: path
          description: name of dish/dishes to return
          required: true
          schema:
            $ref: "#/components/schemas/DishView/properties/name"
      responses:
        200:
          description: dish is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishView"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishView"
        400:
          description: Invalid name supplied
        404:
          description: Dishes not found
  /user/SignUp:
     post:
      tags:
        - Guest
      summary: Sign up as new User
      operationId: signUp
      parameters:
        - name: name
          in: path
          description: name for username
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/name"
        - name: email
          in: path
          description: email
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/email"
        - name: dob
          in: path
          description: Date of birth
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/DOB"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: Dish not found
  /login:
    get:
      tags:
        - User
        - Chef
        - Admin
        - Support
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            $ref: "#/components/schemas/Entity/properties/username"
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            $ref: "#/components/schemas/Entity/properties/password"
      responses:
        '200':
          description: User logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '201':
          description: Chef logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chef"
        '202':
          description: Admin logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        '203':
          description: Support staff logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Support"            
        '400':
          description: Invalid username/password supplied
  /logout:
    get:
      tags:
        - User
        - Chef
        - Admin
        - Support
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation

  /user/{userId}:
    get:
      tags:
        - User
      summary: get user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
    delete:
      tags:
        - User
        - Admin
      summary: Deletes a user if he is logged in and wants to delete his own account
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
    put:
      tags:
        - User
      summary: Update User profile
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: dish to be Edited
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: DOB
          in: query
          description: dish to be Edited
          required: false
          schema:
            $ref: "#/components/schemas/User/properties/DOB"
        - name: email
          in: query
          description: dish to be Edited
          required: false
          schema:
            $ref: "#/components/schemas/User/properties/email"
        
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
  /user/{userId}/chef/{chefId}/Rating:
    get:
      tags:
        - User
      summary: get rating given to chef by ID
      description: Returns a single user
      operationId: getChefRating
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: chefId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
            application/xml:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Invalid ID supplied
        "404":
          description: Rating not found
    post:
      tags:
        - User
      summary: Post a rating to the Chef
      operationId: postChefRating
      parameters:
        - name: userId
          in: path
          description: ID of chef to rate
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: chefId
          in: path
          description: ID of user who is rating
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
        - name: ratingValue
          in: path
          description: Rate chef  between1-5
          required: true
          schema:
            $ref: "#/components/schemas/Rating/properties/ratingValue"
        - name: feedback
          in: path
          description: feedback from the user about the chef
          required: true
          schema:
            $ref: "#/components/schemas/Rating/properties/feedback"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
            application/xml:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Invalid IDs supplied
    delete:
      tags:
        - User
      summary: Deletes a Rating
      operationId: deleteChefRating
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: chefId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/Chef/properties/id"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found

  /user/{userId}/dish/{dishId}/Rating:
    get:
      tags:
        - User
      summary: get rating given to Dish by User
      description: Returns a single user
      operationId: getDishRating
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: dishId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/Dish/properties/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
            application/xml:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Invalid ID supplied
        "404":
          description: Rating not found
    post:
      tags:
        - User
      summary: Post a rating to the Chef
      operationId: postDishRating
      parameters:
        - name: userId
          in: path
          description: ID of chef to rate
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: dishId
          in: path
          description: ID of user who is rating
          required: true
          schema:
            $ref: "#/components/schemas/Dish/properties/id"
        - name: ratingValue
          in: path
          description: Rate chef  between1-5
          required: true
          schema:
            $ref: "#/components/schemas/Rating/properties/ratingValue"
        - name: feedback
          in: path
          description: feedback from the user about the chef
          required: true
          schema:
            $ref: "#/components/schemas/Rating/properties/feedback"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
            application/xml:
              schema:
                $ref: "#/components/schemas/Rating"
        "400":
          description: Invalid IDs supplied
    delete:
      tags:
        - User
      summary: Deletes a Rating
      operationId: deleteDishRating
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: dishId
          in: path
          description: ID of user to return
          required: true
          schema:
            $ref: "#/components/schemas/Dish/properties/id"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found

  /cart:
    get:
      tags:
        - User
      summary: get Dish details by ID from cart
      description: Returns Dish details
      operationId: getDishByIdFromCart
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found

  /cart/dish/{dishId}:
    post:
      tags:
        - User
        - Guest
      summary: add a Dish to Cart
      operationId: addDishCart
      parameters:
        - name: dishId
          in: path
          description: dishId to be added
          required: true
          schema:
            $ref: "#/components/schemas/DishView/properties/id"
        - name: Qty
          in: path
          description: Number of people to serve
          required: true
          schema:
            type: number
            example: 2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid ID supplied
        "404":
          description: Dish not found
    put:
      tags:
        - User
        - Guest
      summary: Update an existing entry on Cart
      operationId: updateDishInCart
      parameters:
        - name: dishId
          in: path
          description: dish to be Edited
          required: true
          schema:
            $ref: "#/components/schemas/DishView/properties/id"
        - name: Qty
          in: path
          description: New quantity of people to serve
          required: true
          schema:
            type: number
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
    delete:
      tags:
        - User
        - Guest
      summary: Deletes a dish from the cart
      operationId: deleteDishFromCart
      parameters:
        - name: dishId
          description: Dish ID to delete
          in: path
          required: true
          schema:
            type: string
        - name: dishName
          in: header
          description: Dish name to delete
          required: false
          schema:
            type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found

  /user/{userId}/order:
    post:
      tags:
        - User
      summary: Make an order
      operationId: placeOrder
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: cart
          in: path
          description: submit cart to place order
          required: true
          schema:
            $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Dish not found

  /user/{userId}/order/{orderId}:
    get:
      tags:
        - User
      summary: get Order placed by ID
      description: Returns Order Details
      operationId: getOrderById
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: Order to be Edited
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found
    put:
      tags:
        - User
      summary: Update an existing Order like change Address or Payment Method
      operationId: updateOrder
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: Order to be Edited
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        - name: deliveryAddress
          in: header
          description: Change Address
          required: false
          schema:
            $ref: "#/components/schemas/Order/properties/DeliveryAddress"
        - name: paymentMethod
          in: header
          description: modify payment Method
          required: false
          schema:
            $ref: "#/components/schemas/Order/properties/PaymentMethod"

      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
    delete:
      tags:
        - User
      summary: Cancel Order
      operationId: deleteOrder
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          description: Order ID to delete
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
      responses:
        "200":
          description: Order Deleted

        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  
  /user/{userId}/order/{orderId}/status:
    get:
      tags:
        - User
      summary: get Order status by ID
      description: Returns Order Details
      operationId: getOrderStatusById
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: Order to be checked
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order/properties/status"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order/properties/status"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  
  
  /user/{userId}/order/{orderId}/complaint:
    post:
      tags:
        - User
      summary: Make a complaint
      operationId: registerComplaint
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: submit cart to place order
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        - name: complaintCat
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/complaintCat"
        - name: complaintDescription
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/complaintDescription"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
            application/xml:
              schema:
                $ref: "#/components/schemas/Complaint"
        "400":
          description: Invalid IDs supplied
        "404":
          description: Dish not found

  
  /user/{userId}/order/{orderId}/complaint/{complaintId}:
    get:
      tags:
        - User
      summary: get ID of complaint
      description: Returns Complaint Details
      operationId: getComplaintById
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: Order to be viewed
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        - name: complaintId
          in: path
          description: Complaint ID to be viewed
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
            application/xml:
              schema:
                $ref: "#/components/schemas/Complaint"
        "400":
          description: Invalid ID supplied
        "404":
          description: Chef not found
    
    put:
      tags:
        - User
      summary: Update an existing Complaint
      operationId: updateComplaint
      parameters:
        - name: userId
          in: path
          description: user ID who is placing order
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/id"
        - name: orderId
          in: path
          description: Order to be Edited
          required: true
          schema:
            $ref: "#/components/schemas/Order/properties/id"
        - name: complaintId
          in: path
          description: Compalaint Id to be edited
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/id"
        - name: complaintCat
          in: query
          description: modify Complaint Cat
          required: false
          schema:
            $ref: "#/components/schemas/Complaint/properties/complaintCat"
        - name: complaintDescription
          in: query
          description: modify Complaint Cat
          required: false
          schema:
            $ref: "#/components/schemas/Complaint/properties/complaintDescription"

      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
    

  /Support/complaint/{complaintId}:
    get:
      tags:
        - Support
      summary: get ID of complaint
      description: Returns Complaint Details
      operationId: getComplaintByIdSupport
      parameters:
        - name: complaintId
          in: path
          description: Complaint ID to be viewed
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
            application/xml:
              schema:
                $ref: "#/components/schemas/Complaint"
        "400":
          description: Invalid ID supplied
        "404":
          description: Complaint not found
    
    put:
      tags:
        - Support
      summary: Update the status of an existing Complaint
      operationId: updateComplaintStatus
      parameters:
        - name: complaintId
          in: path
          description: Compalaint Id to be edited
          required: true
          schema:
            $ref: "#/components/schemas/Complaint/properties/id"
        - name: status
          in: query
          description: Update status
          required: false
          schema:
            $ref: "#/components/schemas/Complaint/properties/status"
        

      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
  
    
components:
  schemas:
    Entity:
      type: object
      description: A real life entity to the system who can get/post/delete/put data 
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 16
    Chef:
      allOf:
        - $ref: "#/components/schemas/Entity" 
        - $ref: "#/components/schemas/User" 
      description: Schema for chef, contains attributes realated to chef, that is login credentials, id, his class, photo, Dishes, specialities, ratings and account balance
      type: object
      required:
        - id
        - name
        - class
        - accountBalance

      properties:
        id:
          type: string
          example: "1001"
        name:
          type: string
          example: Gordon Ramsey
        class:
          type: string
          enum:
            - Executive Chef
            - Head Chef
            - Sous Chef
            - Station Chef
            - Commis Chef 
            
        photoUrls:
          type: array
          items:
            type: string
        
        Dishes:
          description: array of dish Ids of dishes which the chef has added
          type: array
          items:
            $ref: "#/components/schemas/Dish/properties/id"
        specialityDishes:
          description: array of dish Ids of the chef's specials
          type: array
          items:
            $ref: "#/components/schemas/Dish/properties/name"
        specialityCuisines:
          description: array of dish Ids of the chef's special cuisines
          type: array
          items:
            $ref: "#/components/schemas/Dish/properties/cuisine"

        rating:
          description: array of ratings given by users
          type: array
          items:
            $ref: "#/components/schemas/Rating"
        avgRating:
          description: average rating given to the chef
          type: integer
          minimum: 1
          maximum: 5
        accountBalance:
          type: number
          minimum: 0.0
          

    ChefView:
      description: The chefView schema takes care of abstraction of a few properties from the chef class. As some properties are hidden when the user browses the chef profile, it consists of the data which is necessary to be shown
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Chef/properties/id"
        name:
          $ref: "#/components/schemas/Chef/properties/name"
        class:
          $ref: "#/components/schemas/Chef/properties/class"
        Dishes:
          $ref: "#/components/schemas/Chef/properties/Dishes"
        specialityDishes:
          $ref: "#/components/schemas/Chef/properties/specialityDishes"
        specialityCuisines:
          $ref: "#/components/schemas/Chef/properties/specialityCuisines"
        rating:
          $ref: "#/components/schemas/Chef/properties/rating"
        avgRating:
          $ref: "#/components/schemas/Chef/properties/avgRating"
        photoUrls:
          $ref: "#/components/schemas/Chef/properties/photoUrls"

    Admin:
      description: developer who has access to all users, chef and support staff. Chefs and spport staff cannot signUp directly to the system and need to be added by the admin
      allOf:
        - $ref: "#/components/schemas/Entity"
    
    Support:
      description: Schema for customer support and care, they attend complaints made by the customers and update the status at various stages 
      allOf:
        - $ref: "#/components/schemas/Entity"
      type: object
      properties:
        id:
         type: string
         example: "EMP109"
      required:
        - id
      
    User:
      description: Customer with credentials, name, DOB, email. The profile consists of the list of complaints made, list of items in the cart at present,list of orders placed or cancelled. It also requires a default PIN for ingredient price calculations
      allOf:
        - $ref: "#/components/schemas/Entity"
      type: object
      required:
        - id
        - name
        - email
        - defaultPIN
      properties:
        id:
          type: string
          example: "1001"
        name:
          type: string
          example: Amrit Gupta
        email:
          type: string
          format: email
        DOB: 
          type: string
          format: date
        Complaint:
          type: array
          items:
            $ref: "#/components/schemas/Complaint/properties/id"
        Orders:
          type: array
          items:
            $ref: "#/components/schemas/Order/properties/id"
        Cart:
          $ref: "#/components/schemas/Cart"
        
        defaultPIN:
          $ref: "#/components/schemas/pinAndPrice/properties/cityPIN"

            
    Dish:
      description: schema for dish, contains an identifier id, dish photos, name, ratings from users, ingredients, steps to prepare the dish, dish details such as dish description, origin, etc. It is also categorized to a cuisine and has an average rating.
      type: object
      required:
        - id
        - name
        - ingredients
        - stepsToPrepare

      properties:
        id:
          type: string
          example: "DISH1001"
        photoUrls:
          description: array of urls containing the photos of dishes
          type: array
          items:
            type: string
            example: "https://github.com/crescent-igor/Chelf-PayPal-VAP-FinalAssignment/blob/master/Chelf.png"
        name:
          type: string
          example: "Spring Rolls"
        rating:
          description: array of ratings by customers
          type: array
          items:
            $ref: "#/components/schemas/Rating"
        ingredients:
          description: array of ingredient ids and measure
          type: array
          items:
            type: object
            properties:
              ingredient:
                $ref: "#/components/schemas/Ingredient/properties/id"
              quantity: 
                type: number
                example: 3
              units:
                type: string
                example: grams/pieces/ounce
        stepsToPrepare:
          description: steps on how to prepare the dish with the ingredients
          type: string
          example: "1 Pour some water 2 Add ingrdient of ING1001"
        userStepsToPrepare:
          description: instructions after packaging and mixing of potential ingredients, to maintain secrecy and ease of cooking
          type: string
          example: "1 Pour some water 2 Add ingrdient 1"
        details:
          type: string
          example: "Spring rolls are a large variety of filled, rolled appetizers or dim sum found in East Asian, South Asian, and Southeast Asian cuisine."
        cuisine:
          type: string
          enum:
            - Indian
            - Chinese
            - Japanese
            - Italian
            - Mexican
            - American
            - Thai
            - Mediteranean
            - Kebabs
            - Barbecue
            - British
            - German
        avgRating:
          type: integer
          minimum: 1
          maximum: 5
    DishView:
      description: takes care of abstraction of Dishes. As dish data can be sensitive and many chefs keep their recipes secret, the ingredientIDs are not to be expoed to the user similary the original steps to prepare are not to be shared. Hence the DishView schema can look after such cases
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Dish/properties/id"
        name:
          $ref: "#/components/schemas/Dish/properties/name"
        rating:
          $ref: "#/components/schemas/Dish/properties/rating"
        userStepsToPrepare:
          $ref: "#/components/schemas/Dish/properties/userStepsToPrepare"
        details:
          $ref: "#/components/schemas/Dish/properties/details"
        cuisine:
          $ref: "#/components/schemas/Dish/properties/cuisine"
        avgRating:
          $ref: "#/components/schemas/Dish/properties/avgRating"
        photoUrls:
          $ref: "#/components/schemas/Dish/properties/photoUrls"
        
    Ingredient:
      description: an internal schema. It tracks the ingredient IDs with names and prices. The prices of ingredients vary from place to place. For example, cloves are native to Indonesia, India, Sri Lanka and other middle eastern coutries hence their price will remain low but in countries where they need to be imported to it will be higher. The system is intricate with sub-categories of spices as well to cater to authentic service.
      type: object
      required:
        - id
        - name
        - details
      properties:
        id:
          type: string
          example: "ING1001"
        name:
          type: string
          example: "cloves"
        details:
          type: string
          example: The cayenne pepper is a type of Capsicum annuum. It is usually a moderately hot chili pepper used to flavor dishes. Cayenne peppers are a group of tapering
        
        priceList:
          description: a list of PIN and price object as a lookup for ingredient prices
          type: array
          items:
            $ref: "#/components/schemas/pinAndPrice"
    IngredientView:
      description: To abstract the ingredient prices by PINs from users and chefs
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Ingredient/properties/id"
        name:
          $ref: "#/components/schemas/Ingredient/properties/id"
        details:
          $ref: "#/components/schemas/Ingredient/properties/details"
        
          
    pinAndPrice:
      description: PIN codes of various areas and prices of a particualr ingredient
      type: object
      required:
        - cityPIN
        - ingPrice
      properties:
        cityPIN:
          type: string
          example: "400124"
        ingPrice:
          type: number
          example: 450.23
    Cart:
      description: Generic cart schema, which has dish entries and their prices based on delivery PIN code
      type: object
      required:
        - deliveryPIN
      properties:
        deliveryPIN:
          $ref: "#/components/schemas/pinAndPrice/properties/cityPIN"
        dishEntry:
          description: an object dealing with dish entries to the cart to provide cart realted routes
          type: array
          items:
            $ref: "#/components/schemas/CartDishEntry"

    CartDishEntry:
      description: Individual dish entries, consists of the dish, the quantity and price calculated thorugh lookup and PIN
      type: object
      properties:
        dish:
          $ref: "#/components/schemas/DishView"
        qty:
          type: integer
        dishPrice:
          type: number
    Order:
      description: order schema, consists of ID to identify order, the Cart to process, total bill, the Delivery Address for the package to be delivered, payment method and current status of order
      type: object
      required:
        - id
        - CartItems
        - totalBill
        - DeliveryAddress
        - paymentMethod
        - status
      properties:
        id:
          type: string
          example: "ORD1001"
        CartItems:
          $ref: "#/components/schemas/Cart"
        totalBill:
          type: number
          example: 10000
        DeliveryAddress:
          type: string
          example: "D 404, Ganga Constella, Kharadi, Pune"
        PaymentMethod:
          type: string
          enum:
            - Debit Card
            - Credit Card
            - PayPal
            - UPI
            - Pay On Delivery
        status:
          type: string
          enum:
            - Placed
            - Confirmed
            - Out for delivery
            - Delivered
            - Cancelled
    Rating:
      description: generic rating schema to be used in User and Dish, consists of user ID of customer, name, ratingValue in the range 1-5 and a feedback from 10-50 characters
      type: object
      required:
        - userId
        - userName
        - ratingValue
        - feedback
      properties:
        userId:
          $ref: "#/components/schemas/User/properties/id"
        userName:
          $ref: "#/components/schemas/User/properties/name"
        ratingValue:
          type: number
          minimum: 1
          maximum: 5
        feedback:
          type: string
          minLength: 10
          maxLength: 50
    Complaint:
      description: comlpaint schema for user to post complaint tickets. Has an ID, the userID, the order against which the complaint is made, the category of the complaint, the description to elaborate the problem and the current status of the complaint
      type: object
      required:
        - id
        - userId
        - orderId
        - complaintCat
        - complaintDescription
        - status
      properties:
        id:
          type: string
          example: "COM121"
        userId:
          $ref: "#/components/schemas/User/properties/id"
        orderId:
          $ref: "#/components/schemas/Order/properties/id"
        complaintCat:
          type: string
          enum:
            - Order Delayed
            - Refund required
            - Meal quality issue
            - packaging quality issue
            - Other issue
        complaintDescription:
          type: string
          example: "My meal reached an hour late from the expected time of delivery"
        status: 
          type: string
          enum: 
            - posted
            - processing
            - resolved
            - failed